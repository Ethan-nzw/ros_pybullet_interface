<launch>
  <!-- Launch ROS-PyBullet interface node -->
  <node
      name="ros_pybullet_interface"
      pkg="ros_pybullet_interface"
      type="ros_pybullet_interface_node.py"
      clear_params="true"
      output="screen">

      <!-- Pybullet simulation config (required) -->
      <!-- Flag to indicate how bullet simulation step is
           synced with ROS control loop.
           Options:
                0:  pybullet executes all simulation steps in a fixed frequency
                       This can be used to simulate real world
                       ( use simulation freqency > 250 Hz)
                1: pybullet executes every simulation step when commanded by ROS node
                       This can be used to execute one simulation step after one control/interface step
                       Useful for debugging, but not realistic
                       (specially, if control loop freqency is < 250 Hz)
                2: pybullet executes a simulation step when ROS srv manualPybulletSteps is called
                   This can be used to execute one simulation step after one control/interface step
                   Useful for debugging MPC-like algorithms, but not realistic
                  -->
    <param
        name="pybullet_sim_self_loop"
        value="0"
        type="int"/>

    <!-- Robot config (required) -->
    <rosparam param="robot_config_file_names">
      [
      "{ros_pybullet_interface}/configs/yin.yaml",
      "{ros_pybullet_interface}/configs/yang.yaml",
      "{ros_pybullet_interface}/configs/yin_visual.yaml",
      "{ros_pybullet_interface}/configs/yang_visual.yaml",
      ]
    </rosparam>

    <!-- Camera config (required) -->
    <param
        name="camera_config"
        value="{ros_pybullet_interface}/configs/realworld_camera.yaml"
        type="str"/>

    <!-- List visual objects (optional) -->
    <rosparam param="visual_object_config_file_names">
      [
      '{ros_pybullet_interface}/configs/sphere.yaml',
      '{ros_pybullet_interface}/configs/sphere2.yaml',
      '{ros_pybullet_interface}/configs/target_obj_visual_demo.yaml',
      '{ros_pybullet_interface}/configs/Box_IIWAs_visual_vicon.yaml',
      <!-- '{ros_pybullet_interface}/configs/yang_workspace_visual.yaml',
      '{ros_pybullet_interface}/configs/yin_workspace_visual.yaml', -->
      ]
    </rosparam>

    <!-- List objects (optional) -->
    <rosparam param="object_config_file_names">
      [
      '{ros_pybullet_interface}/configs/target_obj_demo.yaml',
      ]
    </rosparam>


  </node>


  <!-- Node that republishes vicon info to the input format of the
       estimation node -->
  <node
       name="read_publish_object_state"
       pkg="ros_pybullet_interface"
       type="read_publish_object_estimation.py"
       clear_params="true"
       output="screen">

       <param
           name="sim_or_real"
           value="real"
           type="str"/>

  </node>


  <!-- Flag that activates forwarding of commands to the robots -->
  <arg name="command_real_robots" default="false"/>


  <node
      name="sim_HW_republisher_yang"
      pkg="ros_pybullet_interface"
      type="sim_joint_cmd_2_FRI.py"
      output="screen">

    <param
        name="robot_name"
        value="yang"
        type="str"/>

    <param
        name="cmd_real_robot"
        value="$(arg command_real_robots)"
        type="bool"/>

  </node>

  <node
      name="sim_HW_republisher_yin"
      pkg="ros_pybullet_interface"
      type="sim_joint_cmd_2_FRI.py"
      output="screen">

    <param
        name="robot_name"
        value="yin"
        type="str"/>

    <param
        name="cmd_real_robot"
        value="$(arg command_real_robots)"
        type="bool"/>

  </node>

  <!-- PyRBDL4dIK Environmet node (receiver - publisher) -->
  <node
      name="ros_PyRBDL4dIK_interface"
      pkg="ros_pybullet_interface"
      type="ros_rbdl_IK_interace_node.py"
      output="screen">

    <param
        name="robot_config"
        value="{ros_pybullet_interface}/configs/yin_visual.yaml"
        type="str"/>

    <!-- remap such that the initial state of the IK comes from real world state -->
    <remap from="yin_visual/ros_pybullet_interface/joint_state/current"  to="yin/ros_pybullet_interface/joint_state/target" />


  </node>


  <node
      name="ros_PyRBDL4dIK_interface2"
      pkg="ros_pybullet_interface"
      type="ros_rbdl_IK_interace_node.py"
      output="screen">

    <param
        name="robot_config"
        value="{ros_pybullet_interface}/configs/yang_visual.yaml"
        type="str"/>

        <!-- remap such that the initial state of the IK comes from real world state -->
        <remap from="yang_visual/ros_pybullet_interface/joint_state/current"  to="yang/ros_pybullet_interface/joint_state/target" />

  </node>



</launch>
