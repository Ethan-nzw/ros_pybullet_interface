<launch>

  <!-- Arguments -->
  <arg name="interface" default="keyboard"/>
  <param name="human_interface" type="string" value="$(arg interface)"/>

  <!-- Simulation -->
  <!-- ========== -->

  <!-- ROS-Pybullet Interface -->
  <node pkg="ros_pybullet_interface" name="ros_pybullet_interface" type="ros_pybullet_interface_node.py" output="screen">

    <param name="pybullet_config_filename" type="string" value="{rpbi_examples}/configs/dmp_example/pybullet.yaml"/>
    <param name="visualizer_config_filename" type="string" value="{rpbi_examples}/configs/dmp_example/visualizer.yaml"/>

    <rosparam param="pybullet_robot_config_filenames">
      [
      "{rpbi_examples}/configs/dmp_example/kuka_lwr.yaml"
      ]
    </rosparam>

    <rosparam param="pybullet_collision_object_config_filenames">
      [
      "{rpbi_examples}/configs/floor.yaml"
      ]
    </rosparam>
  </node>

  <!-- Rviz -->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find rpbi_examples)/rviz/teleoperation_eff_demo.rviz" />

  <!-- Human interface -->
  <!-- =============== -->

  <!-- Keyboard driver, note this is used in both cases where interface is 'spacenav' and 'keyboard' -->
  <node pkg="keyboard" name="keyboard" type="keyboard"/>

  <!-- Spacenav as interface -->
  <group if="$(eval interface == 'spacenav')">

    <!-- Spacenav driver -->
    <node pkg="spacenav_node" type="spacenav_node" name="$(anon spacenav_node)" output="screen">
      <remap from="spacenav/joy" to="joy"/>
      <param name="zero_when_static" value="true"/>
      <param name="static_count_threshold" value="30"/>
    </node>

    <!-- Map spacenav to operator signal -->
    <node pkg="operator_node" name="joy2osig" type="scale_node.py">
      <param name="axes" type="str" value="2 1 0 5 4 3"/>
      <param name="scale" type="str" value="-1 1 1 0 0 0"/>
    </node>

  </group>

  <!-- Keyboard as interface -->
  <group if="$(eval interface == 'keyboard')">

    <node pkg="operator_node" name="key2joy" type="keyboard_to_joy.py">
      <rosparam param="axes">["DOWN UP", "RIGHT LEFT", "s w"]</rosparam>
    </node>

    <!-- Map keyboard to operator signal -->
    <node pkg="operator_node" name="joy2osig" type="scale_node.py">
      <param name="axes" type="str" value="2 1 0"/>
      <param name="scale" type="str" value="-1 1 1"/>
    </node>

  </group>

  <!-- Inverse Kinematics -->
  <!-- ================== -->

  <!-- Use operator signal to update a tf -->
  <node pkg="operator_node" name="teleop_tf" type="teleop_tf_node.py">
    <param name="parent_frame" type="str" value="kuka_start"/>
    <param name="child_frame" type="str" value="kuka_target"/>
  </node>


  <!-- Parse target tf to IK setup -->
  <node pkg="ik_ros" name="tf_to_ik_setup" type="tf_to_floatarray_node.py" output="screen">
    <param name="parent_frame_id" type="string" value="rpbi/kuka_lwr/base"/>
    <param name="child_frame_id" type="string" value="kuka_target"/>
    <remap from="transform" to="setup"/>
  </node>

  <!-- IK Node -->
  <node pkg="ik_ros" name="ik_node" type="ik_node.py" args="TracIKInterface" output="screen">
    <param name="urdf_filename" type="string" value="{ik_ros_examples}/robots/lwr.urdf"/>
    <param name="tip_link" type="string" value="lwr_arm_7_link"/>
    <param name="base_link" type="string" value="base"/>
    <remap from="joint_states/target" to="rpbi/kuka_lwr/joint_states/target"/>
  </node>

  <!-- Static transforms -->
  <!-- ================= -->

  <!-- Connect world and rpbi/world -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="rpbi_world_in_world"
	args="0 0 0 0 0 0 world rpbi/world"/>

  <!-- Set eff start pose -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="kuka_start_pose_in_world"
	args="0.229 -0.337 0.398 0.721 -0.002 -0.693 -0.011 world kuka_start"/>

  <!-- Learning from demonstration -->
  <!-- =========================== -->

  <!-- DMP server: https://github.com/cmower/dmp -->
  <node name="dmp" pkg="dmp" type="dmp_server" respawn="false" output="screen"/>

</launch>
